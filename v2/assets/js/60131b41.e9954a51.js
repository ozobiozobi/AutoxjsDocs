"use strict";(self.webpackChunkautox_doc=self.webpackChunkautox_doc||[]).push([[6341],{3283:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rhino/base/mqtt","title":"MQTT","description":"6.5.9 \u65b0\u589e","source":"@site/docs/rhino/base/mqtt.md","sourceDirName":"rhino/base","slug":"/rhino/base/mqtt","permalink":"/docs/rhino/base/mqtt","draft":false,"unlisted":false,"editUrl":"https://github.com/aiselp/AutoxDoc/tree/main/docs/rhino/base/mqtt.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Keys \u6309\u952e\u6a21\u62df","permalink":"/docs/rhino/base/keys"},"next":{"title":"Storages \u672c\u5730\u50a8\u5b58","permalink":"/docs/rhino/base/storages"}}');var o=r(4848),s=r(8453);const c={},i="MQTT",a={},l=[{value:"\u4ee3\u7801\u793a\u4f8b",id:"\u4ee3\u7801\u793a\u4f8b",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"mqtt",children:"MQTT"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.code,{children:"6.5.9 \u65b0\u589e"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"\u7a33\u5b9a\u6027: \u7a33\u5b9a"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["MQTT \u6a21\u5757\uff0c\u91c7\u7528",(0,o.jsx)(e.a,{href:"https://github.com/eclipse/paho.mqtt.java",children:"org.eclipse.paho.client.mqttv3"}),"\u5b9e\u73b0"]}),"\n",(0,o.jsx)(e.h2,{id:"\u4ee3\u7801\u793a\u4f8b",children:"\u4ee3\u7801\u793a\u4f8b"}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"\u4e3b\u9898\u8ba2\u9605\u3001\u53d1\u5e03\u3001QOS\u3001\u9057\u5631\u6d88\u606f"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'importPackage(Packages["org.eclipse.paho.client.mqttv3"]);\r\nimportClass("org.eclipse.paho.android.service.MqttAndroidClient");\r\n\r\n// \u8fde\u63a5\u3001\u8ba2\u9605\u914d\u7f6e\r\nconst MQTT_URL = "tcp://192.168.20.225:1883";\r\nconst CLIENT_ID = "MOCK";\r\nconst TOPIC = "ANDROID_MOCK";\r\nconst QOS = 2;\r\nconst USERNAME = "device";\r\nconst PASSWORD = "public";\r\n\r\nconst client = new MqttAndroidClient(context, MQTT_URL, CLIENT_ID);\r\nconst subscribeToTopic = () => {\r\n  try {\r\n    client.subscribe(\r\n      TOPIC,\r\n      QOS,\r\n      null,\r\n      new IMqttActionListener({\r\n        onSuccess: (token) => {\r\n          toast("MQTT \u8ba2\u9605\u6210\u529f");\r\n        },\r\n        onFailure: (token, error) => {\r\n          toast("MQTT \u8ba2\u9605\u5931\u8d25 " + error);\r\n        },\r\n      })\r\n    );\r\n  } catch (error) {\r\n    toast(error.message);\r\n    alert(\'MQTT\u8ba2\u9605\u9519\u8bef\\n\\n"\' + error.message);\r\n  }\r\n};\r\n\r\nconst initMQTT = () => {\r\n  // \u521b\u5efa\u914d\u7f6e\r\n  const mqttConnectOptions = new MqttConnectOptions();\r\n  mqttConnectOptions.setAutomaticReconnect(true);\r\n  mqttConnectOptions.setCleanSession(true);\r\n  mqttConnectOptions.setUserName(USERNAME);\r\n  mqttConnectOptions.setPassword(Array.from(PASSWORD));\r\n  // \u9057\u5631\u6d88\u606f QOS = 1, retained = true\r\n  let willMsgJavaString = new java.lang.String("i am gone");\r\n  let willMsgJavaBytes = willMsgJavaString.getBytes("UTF-8");\r\n  mqttConnectOptions.setWill("device-gone", willMsgJavaBytes, 1, true);\r\n\r\n  console.log("mqttConnectOptions", mqttConnectOptions);\r\n\r\n  const callback = new MqttCallbackExtended({\r\n    connectComplete: (reconnect, serverUri) => {\r\n      if (reconnect) {\r\n        subscribeToTopic();\r\n        console.log("\u91cd\u65b0\u8fde\u63a5\u5230MQTT");\r\n      } else {\r\n        console.log("\u8fde\u63a5\u5230MQTT");\r\n      }\r\n    },\r\n    connectionLost: () => {\r\n      console.log("MQTT \u8fde\u63a5\u4e22\u5931");\r\n    },\r\n    messageArrived: (topic, message) => {\r\n      console.log("MQTT MESSAGE: ", topic, message);\r\n    },\r\n  });\r\n  client.setCallback(callback);\r\n\r\n  client.connect(\r\n    mqttConnectOptions,\r\n    null,\r\n    new IMqttActionListener({\r\n      onSuccess: () => {\r\n        console.log("mqtt\u8fde\u63a5\u6210\u529f");\r\n        subscribeToTopic();\r\n      },\r\n      onFailure: (token, error) => {\r\n        console.error("mqtt\u8fde\u63a5\u5931\u8d25", error);\r\n        exit();\r\n      },\r\n    })\r\n  );\r\n};\r\n\r\nconst publish = (topic, msg, qos = 1, retained = false) => {\r\n  // publish message\r\n  try {\r\n    let javaString = new java.lang.String(msg);\r\n    let byteArray = javaString.getBytes("UTF-8");\r\n    client.publish(topic, byteArray, qos, retained);\r\n  } catch (error) {\r\n    console.error("MQTT \u53d1\u5e03\u5931\u8d25", error);\r\n  }\r\n};\r\n\r\n// \u8fde\u63a5\r\ninitMQTT();\r\nsetTimeout(() => {\r\n  toast("7\u79d2\u540e\u81ea\u52a8\u5173\u95ed");\r\n  // send message\r\n  publish(TOPIC, "hello");\r\n}, 3000);\r\n// \u65ad\u5f00\u5e76\u9000\u51fa\r\nsetTimeout(() => {\r\n  client.close();\r\n  client.disconnect();\r\n  toast("\u81ea\u52a8\u5173\u95ed\u5e76\u9000\u51fa\u811a\u672c");\r\n  exit();\r\n}, 10 * 1000);\r\n\r\n// \u9632\u6b62\u8fdb\u7a0b\u9000\u51fa\r\nsetInterval(() => {\r\n  //\r\n}, 1000);\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>c,x:()=>i});var t=r(6540);const o={},s=t.createContext(o);function c(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);